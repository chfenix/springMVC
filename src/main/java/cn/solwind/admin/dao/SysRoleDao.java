package cn.solwind.admin.dao;

import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Options;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;

import cn.solwind.admin.entity.SysFunction;
import cn.solwind.admin.entity.SysRole;

public interface SysRoleDao {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_role
     *
     * @mbg.generated
     */
    @Delete({
        "delete from sys_role",
        "where ID = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_role
     *
     * @mbg.generated
     */
    @Insert({
        "insert into sys_role (ID, NAME, ",
        "CODE, CREATE_TIME, ",
        "CREATE_USER, MODIFY_TIME, ",
        "MODIFY_USER)",
        "values (#{id,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, ",
        "#{code,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, ",
        "#{createUser,jdbcType=VARCHAR}, #{modifyTime,jdbcType=TIMESTAMP}, ",
        "#{modifyUser,jdbcType=VARCHAR})"
    })
    int insert(SysRole record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_role
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "ID, NAME, CODE, CREATE_TIME, CREATE_USER, MODIFY_TIME, MODIFY_USER",
        "from sys_role",
        "where ID = #{id,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="NAME", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="CODE", property="code", jdbcType=JdbcType.VARCHAR),
        @Result(column="CREATE_TIME", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="CREATE_USER", property="createUser", jdbcType=JdbcType.VARCHAR),
        @Result(column="MODIFY_TIME", property="modifyTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="MODIFY_USER", property="modifyUser", jdbcType=JdbcType.VARCHAR)
    })
    SysRole selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_role
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "ID, NAME, CODE, CREATE_TIME, CREATE_USER, MODIFY_TIME, MODIFY_USER",
        "from sys_role"
    })
    @Results({
        @Result(column="ID", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="NAME", property="name", jdbcType=JdbcType.VARCHAR),
        @Result(column="CODE", property="code", jdbcType=JdbcType.VARCHAR),
        @Result(column="CREATE_TIME", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="CREATE_USER", property="createUser", jdbcType=JdbcType.VARCHAR),
        @Result(column="MODIFY_TIME", property="modifyTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="MODIFY_USER", property="modifyUser", jdbcType=JdbcType.VARCHAR)
    })
    List<SysRole> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table sys_role
     *
     * @mbg.generated
     */
    @Update({
        "update sys_role",
        "set NAME = #{name,jdbcType=VARCHAR},",
          "CODE = #{code,jdbcType=VARCHAR},",
          "CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},",
          "CREATE_USER = #{createUser,jdbcType=VARCHAR},",
          "MODIFY_TIME = #{modifyTime,jdbcType=TIMESTAMP},",
          "MODIFY_USER = #{modifyUser,jdbcType=VARCHAR}",
        "where ID = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(SysRole record);
    
	//通过角色名称和角色编码查询角色信息
	@Select({"<script>"
			+ "select * from sys_role where 1=1"
			+ "<when test='name!=null'>and name like #{name} </when>"
			+ "<when test='code!=null'>and code like #{code} </when>"
			+ "order by id desc"
			+ "</script>"})
	List<SysRole> queryRoleInfo(@Param("name")String name,@Param("code")String code,@Param("pageNum")int pageNum, @Param("pageSize") int pageSize);
    
	//插入一对多关系数据到role—function表
	@Insert({"<script>"
			+ "insert into sys_role_func(role_id,func_id) values "
			+ "<foreach collection='funcId' item='funcId' separator=','>"
			+ "(#{roleId},#{funcId})"
			+ "</foreach>"
			+ "</script>"})
	int addRoleFunc(@Param("roleId")String roleId,@Param("funcId")String[] funcId);
	
	//插入一对多关系进入r_f表前进行删除操作
	@Delete({"delete from sys_role_func where role_id=#{roleId}"})
	int deleteRFByRoleId(String roleId);
	
	//添加角色信息到角色表,当前不添加创建人
	@Insert({"insert into sys_role(code,name,status,create_time,create_user) values "
			+ "(#{sr.code},#{sr.name},${@cn.solwind.admin.common.Constants@COMMON_STATUS_VALID},"
			+ "#{sr.createTime},#{sr.createUser})"})
	@Options(useGeneratedKeys=true, keyProperty="sr.id", keyColumn="id")
	int addRoleInfo(@Param("sr")SysRole sysrole);
	
	//角色信息重复性校验
	@Select(value="select count(*) from sys_role where (name=#{name} or code=#{code}) and id<>#{id}")
	int roleDuplicate(@Param("name")String name,@Param("code")String code,@Param("id")String id);
	
	//通过roleId查询角色信息
	@Select({"select * from sys_role where id=#{roleId}"})
	SysRole getRoleInfoById(String roleId);
	
	//根据roleId查询角色功能关系数据,并处理成字符串进行返回
	@Select({"select func_id from sys_role_func where role_id=#{roleId}"})
	List<String> getRFInfoById(String roleId);
	
	//角色信息修改
	@Update({"update sys_role set "
			+ "name=#{sr.name},code=#{sr.code},status=#{sr.status},"
			+ "modify_user=#{sr.modifyUser},modify_time=#{sr.modifyTime} "
			+ "where id=#{sr.id}"})
	int updateRoleInfo(@Param("sr")SysRole sysRole);
	
	//获取所有有效功能
	@Select({"select * from sys_function "
			+ "where status=${@cn.solwind.admin.common.Constants@COMMON_STATUS_VALID}"})
	List<SysFunction> queryAllValidFunction();
	
	//角色信息删除，实质为修改status为0
	@Update({"update sys_role set status=0,modify_user=#{sr.modifyUser},modify_time=#{sr.modifyTime} where id=#{sr.id}"})
	int deleteRoleInfo(@Param("sr")SysRole sysRole);
}